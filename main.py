import asyncio
import json
import logging
import time
import os
from datetime import datetime, timedelta
import telegram
from pybit.unified_trading import HTTP
from typing import Dict, List, Optional, Tuple
import signal
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S',
    handlers=[
        logging.FileHandler(f'logs/bybit_bot_{datetime.now().strftime("%Y%m%d_%H%M")}.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('BybitBot')
logger.setLevel(logging.INFO)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s', datefmt='%H:%M:%S')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

logger.info("üöÄ === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ñ–ï–ù–û ===")

class BybitFundingBot:
    def __init__(self):
        logger.info("üîß === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BybitFundingBot ===")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - Funding Arbitrage
        self.SYMBOLS = ["ETHUSDT", "DOGEUSDT"]
        self.STABLE = "USDT"
        self.POSITION_SIZE = 5.0
        self.CHECK_INTERVAL = 1800
        self.FUNDING_RATE_THRESHOLD = 0.02
        self.MAX_POSITIONS_PER_SYMBOL = 1
        self.ORDER_TYPE = "Market"
        self.STOP_LOSS_PERCENT = 0.05
        self.CLOSE_NEGATIVE_RATE = True

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - Scalping
        self.SCALP_SYMBOLS = ["ETHUSDT", "DOGEUSDT", "BTCUSDT"]
        self.SCALP_POSITION_SIZE = 10.0
        self.SCALP_CHECK_INTERVAL = 30
        self.SCALP_PROFIT_TARGET = 0.003
        self.SCALP_RSI_PERIOD = 14
        self.SCALP_RSI_OVERSOLD = 30
        self.SCALP_RSI_OVERBOUGHT = 70
        self.SCALP_VOLUME_MULTIPLIER = 1.5
        self.SCALP_MAX_POSITIONS = 3
        self.SCALP_TRAILING_STOP = 0.001
        self.SCALP_TIMEOUT_MINUTES = 10

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.SCALP_STATUS_INTERVAL = 300
        self.TELEGRAM_STATUS_INTERVAL = 1800

        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        self.BOT_MODE = "scalping"  # "funding" –∏–ª–∏ "scalping"

        logger.info(f"‚öôÔ∏è  –†–ï–ñ–ò–ú: {self.BOT_MODE.upper()}")
        logger.info(f"üìà –°–ö–ê–õ–¨–ü–ò–ù–ì –ü–ê–†–´: {', '.join(self.SCALP_SYMBOLS)}")
        logger.info(f"üîÑ –ò–ù–¢–ï–†–í–ê–õ: {self.SCALP_CHECK_INTERVAL} —Å–µ–∫")

        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
        self.CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

        # API –∫–ª—é—á–∏
        self.API_KEY = os.getenv("BYBIT_API_KEY")
        self.API_SECRET = os.getenv("BYBIT_API_SECRET")

        logger.info("üîë === –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ===")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        required_vars = {
            "BYBIT_API_KEY": self.API_KEY,
            "BYBIT_API_SECRET": self.API_SECRET,
            "TELEGRAM_TOKEN": self.TELEGRAM_TOKEN,
            "TELEGRAM_CHAT_ID": self.CHAT_ID
        }

        missing_vars = [var for var, value in required_vars.items() if not value]
        if missing_vars:
            logger.error(f"‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢: {', '.join(missing_vars)}")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")

        logger.info("‚úÖ –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ù–ê –ú–ï–°–¢–ï")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        try:
            self.session = HTTP(
                api_key=self.API_KEY,
                api_secret=self.API_SECRET,
                testnet=False
            )
            logger.info("üîó Bybit API –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå API –û–®–ò–ë–ö–ê: {e}")
            raise

        try:
            self.bot = telegram.Bot(token=self.TELEGRAM_TOKEN)
            logger.info("üì± Telegram –±–æ—Ç –≥–æ—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå TELEGRAM –û–®–ò–ë–ö–ê: {e}")
            raise

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.active_positions = {}
        self.active_scalp_positions = {}
        self.ohlcv_cache = {}
        self.rsi_cache = {}
        self.symbol_info_cache = {}
        self.balance_cache = {}
        self.running = True
        self.last_scalp_check = 0
        self.last_status_update = 0
        self.last_telegram_status = 0
        self.signal_checks = 0
        self.successful_signals = 0

        # Graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        logger.info("üõ°Ô∏è Signal handlers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        # –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs("logs", exist_ok=True)
        logger.info("üìÅ –ü–∞–ø–∫–∞ logs –≥–æ—Ç–æ–≤–∞")

        # –¢–µ—Å—Ç API
        logger.info("üîç === –¢–ï–°–¢ API ===")
        try:
            test_response = self.session.get_tickers(category="linear", symbol="BTCUSDT")
            if test_response.get("retCode") == 0:
                price = float(test_response["result"]["list"][0]["lastPrice"])
                logger.info(f"‚úÖ API OK | BTCUSDT: ${price:,.2f}")
            else:
                logger.warning(f"‚ö†Ô∏è  API –¢–ï–°–¢: {test_response.get('retMsg')}")
        except Exception as e:
            logger.error(f"‚ùå API –¢–ï–°–¢: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        self._validate_symbols()
        logger.info("‚úÖ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")

    def _validate_symbols(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        logger.info("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–ú–í–û–õ–û–í...")
        all_symbols = list(set(self.SYMBOLS + self.SCALP_SYMBOLS))
        valid_symbols = []

        for symbol in all_symbols:
            try:
                response = self.session.get_instruments_info(category="linear", symbol=symbol)
                if response.get("retCode") == 0 and response["result"]["list"]:
                    logger.info(f"‚úÖ {symbol} - OK")
                    valid_symbols.append(symbol)
                    self.symbol_info_cache[symbol] = {
                        "linear": True,
                        "spot": True,
                        "last_check": time.time()
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è  {symbol} - –û–¢–ö–õ–û–ù–ï–ù")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  {symbol} - –û–®–ò–ë–ö–ê: {e}")

        self.SYMBOLS = [s for s in self.SYMBOLS if s in valid_symbols]
        self.SCALP_SYMBOLS = [s for s in self.SCALP_SYMBOLS if s in valid_symbols]

        logger.info(f"üìä –í–ê–õ–ò–î–ù–´–ï: {valid_symbols}")
        logger.info(f"üìà –°–ö–ê–õ–¨–ü–ò–ù–ì: {self.SCALP_SYMBOLS}")

        if self.BOT_MODE == "scalping" and not self.SCALP_SYMBOLS:
            raise ValueError("–ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞!")

    def is_symbol_valid(self, symbol: str, category: str = "linear") -> bool:
        if symbol in self.symbol_info_cache:
            info = self.symbol_info_cache[symbol]
            if time.time() - info["last_check"] < 3600:
                return info.get(category, False)

        try:
            response = self.session.get_instruments_info(category=category, symbol=symbol)
            is_valid = response.get("retCode") == 0 and response["result"]["list"]
            self.symbol_info_cache[symbol] = {
                category: is_valid,
                "last_check": time.time()
            }
            return is_valid
        except Exception:
            return False

    # üî• –í–ê–ñ–ù–´–ô –ú–ï–¢–û–î - –ë–´–õ –£–î–ê–õ–ï–ù!
    def get_available_balance(self, coin: str, account_type: str = "UNIFIED") -> Optional[float]:
        """–ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê - –í–ï–†–ù–£–õ–ò!"""
        logger.info(f"üí∞ –ó–ê–ü–†–û–° –ë–ê–õ–ê–ù–°–ê: {coin} ({account_type})")

        cache_key = f"{coin}_{int(time.time() // 300)}"
        if cache_key in self.balance_cache:
            logger.info(f"üíæ –ë–ê–õ–ê–ù–° –ò–ó –ö–≠–®–ê: {self.balance_cache[cache_key]:.2f}")
            return self.balance_cache[cache_key]

        account_types = ["UNIFIED", "FUND", "SPOT"]

        for account_type in account_types:
            try:
                logger.info(f"üîç –ü–†–û–ë–£–ï–ú {account_type} –¥–ª—è {coin}")

                if coin == "USDT":
                    balance = self.session.get_wallet_balance(accountType=account_type)
                else:
                    balance = self.session.get_wallet_balance(accountType=account_type, coin=coin)

                logger.info(f"üìÑ –û–¢–í–ï–¢ API ({account_type}): retCode={balance.get('retCode')}")

                if balance.get("retCode") != 0:
                    logger.warning(f"‚ö†Ô∏è  {account_type}: –û–®–ò–ë–ö–ê - {balance.get('retMsg')}")
                    continue

                result_list = balance["result"]["list"]
                if not result_list:
                    logger.warning(f"‚ö†Ô∏è  {account_type}: –ü–£–°–¢–û–ô –°–ü–ò–°–û–ö")
                    continue

                # SPOT –∞–∫–∫–∞—É–Ω—Ç
                if account_type == "SPOT":
                    for account in result_list:
                        for c in account.get("coin", []):
                            if c["coin"] == coin:
                                balance_value = c.get("free", c.get("walletBalance", "0"))
                                if balance_value:
                                    balance_amount = float(balance_value)
                                    logger.info(f"üí∞ SPOT {coin}: {balance_amount:.2f}")
                                    self.balance_cache[cache_key] = balance_amount
                                    return balance_amount
                else:
                    # UNIFIED/FUND –∞–∫–∫–∞—É–Ω—Ç—ã
                    for account in result_list:
                        coin_list = account.get("coin", [])
                        for c in coin_list:
                            if c["coin"] == coin:
                                balance_value = (
                                    c.get("walletBalance") or
                                    c.get("availableToWithdraw") or
                                    c.get("free") or
                                    c.get("equity") or
                                    "0"
                                )
                                if balance_value and balance_value != "0":
                                    balance_amount = float(balance_value)
                                    logger.info(f"üí∞ {account_type} {coin}: {balance_amount:.2f}")
                                    self.balance_cache[cache_key] = balance_amount
                                    return balance_amount

                logger.info(f"‚ÑπÔ∏è  {account_type}: {coin} –ù–ï –ù–ê–ô–î–ï–ù")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  {account_type}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
                continue

        logger.error(f"‚ùå –ë–ê–õ–ê–ù–° {coin} –ù–ï –ü–û–õ–£–ß–ï–ù")
        self.balance_cache[cache_key] = 0.0
        return 0.0

    def _signal_handler(self, signum, frame):
        logger.info(f"üõë –°–ò–ì–ù–ê–õ {signum} –ü–û–õ–£–ß–ï–ù")
        self.running = False
        asyncio.create_task(self._cleanup())

    async def _cleanup(self):
        logger.info("üîÑ === –û–ß–ò–°–¢–ö–ê ===")
        for symbol in list(self.active_scalp_positions.keys()):
            await self._close_scalp_position(symbol)
        logger.info("‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        sys.exit(0)

    async def send_telegram_message(self, message: str, parse_mode: str = None):
        try:
            await self.bot.send_message(
                chat_id=self.CHAT_ID,
                text=message,
                parse_mode=parse_mode
            )
            logger.info(f"üì± –û–¢–ü–†–ê–í–õ–ï–ù–û: {message[:50]}...")
        except Exception as e:
            logger.error(f"‚ùå TELEGRAM: {e}")

    # ========== –°–ö–ê–õ–¨–ü–ò–ù–ì –ú–ï–¢–û–î–´ ==========
    def get_instrument_info(self, category: str, symbol: str) -> Optional[Dict]:
        if not self.is_symbol_valid(symbol, category):
            return None
        try:
            response = self.session.get_instruments_info(category=category, symbol=symbol)
            if response.get("retCode") != 0:
                return None

            instrument = response["result"]["list"][0]
            lot_size_filter = instrument.get("lotSizeFilter", {})
            min_order_qty = float(lot_size_filter.get("minOrderQty", "0.001"))
            qty_step = lot_size_filter.get("qtyStep", "0.0001")
            qty_precision = len(qty_step.split(".")[-1]) if "." in qty_step else 0

            return {
                "minOrderQty": min_order_qty,
                "qtyPrecision": qty_precision,
                "minOrderAmt": 10.0 if category == "spot" else 0.0
            }
        except Exception:
            return None

    def get_ohlcv(self, symbol: str, interval: str = "1", limit: int = 100) -> Optional[List]:
        try:
            response = self.session.get_kline(
                category="linear",
                symbol=symbol,
                interval=interval,
                limit=limit
            )
            if response.get("retCode") != 0:
                return None

            klines = response["result"]["list"]
            ohlcv_data = []
            for kline in klines:
                ohlcv_data.append({
                    "timestamp": int(kline[0]),
                    "open": float(kline[1]),
                    "high": float(kline[2]),
                    "low": float(kline[3]),
                    "close": float(kline[4]),
                    "volume": float(kline[5])
                })
            return ohlcv_data
        except Exception:
            return None

    def calculate_rsi(self, prices: List[float], period: int = 14) -> Optional[float]:
        if len(prices) < period + 1:
            return None

        deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
        gains = [d if d > 0 else 0 for d in deltas[-period:]]
        losses = [-d if d < 0 else 0 for d in deltas[-period:]]

        avg_gain = sum(gains) / period
        avg_loss = sum(losses) / period

        if avg_loss == 0:
            return 100

        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

    def get_rsi(self, symbol: str) -> Optional[float]:
        try:
            ohlcv = self.get_ohlcv(symbol, "1", 50)
            if not ohlcv or len(ohlcv) < 20:
                return None

            closes = [candle["close"] for candle in ohlcv[-20:]]
            return self.calculate_rsi(closes, self.SCALP_RSI_PERIOD)
        except Exception:
            return None

    def get_current_price(self, symbol: str) -> Optional[float]:
        try:
            ticker = self.session.get_tickers(category="linear", symbol=symbol)
            if ticker.get("retCode") != 0:
                return None
            return float(ticker["result"]["list"][0]["lastPrice"])
        except Exception:
            return None

    def get_volume_info(self, symbol: str) -> Optional[Dict]:
        try:
            ohlcv = self.get_ohlcv(symbol, "1", 20)
            if not ohlcv:
                return None

            current_volume = ohlcv[0]["volume"]
            avg_volume = sum(candle["volume"] for candle in ohlcv[1:]) / len(ohlcv[1:])

            return {
                "current": current_volume,
                "average": avg_volume,
                "multiplier": current_volume / avg_volume if avg_volume > 0 else 1.0
            }
        except Exception:
            return {"multiplier": 1.0}

    def calculate_scalp_qty(self, symbol: str, position_size: float) -> Optional[float]:
        try:
            instrument_info = self.get_instrument_info("linear", symbol)
            if not instrument_info:
                return None

            price = self.get_current_price(symbol)
            if not price or price <= 0:
                return None

            qty = position_size / price
            return max(round(qty, instrument_info["qtyPrecision"]), instrument_info["minOrderQty"])
        except Exception:
            return None

    async def place_scalp_order(self, symbol: str, side: str, qty: float, price: float) -> Optional[str]:
        try:
            order_params = {
                "category": "linear",
                "symbol": symbol,
                "side": side,
                "orderType": "Market",
                "qty": str(qty)
            }

            logger.info(f"üöÄ –û–†–î–ï–†: {symbol} {side} | {qty:.6f} @ ${price:,.2f}")

            # –†–ï–ê–õ–¨–ù–´–ô –í–´–ó–û–í API
            response = self.session.place_order(**order_params)

            if response.get("retCode") != 0:
                error_msg = f"‚ùå {symbol} –û–®–ò–ë–ö–ê: {response.get('retMsg')} (#{response.get('retCode')})"
                logger.error(error_msg)
                await self.send_telegram_message(error_msg)
                return None

            order_id = response["result"]["orderId"]
            self.successful_signals += 1

            logger.info(f"‚úÖ –û–†–î–ï–† # {order_id} | {symbol} {side} | –°–¥–µ–ª–æ–∫: {self.successful_signals}")

            message = f"‚ö° <b>{symbol}</b> {side}\nüí∞ {qty:.6f} @ <code>${price:,.2f}</code>"
            await self.send_telegram_message(message, parse_mode="HTML")

            return order_id

        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –û–†–î–ï–†–ê {symbol}: {e}")
            await self.send_telegram_message(f"‚ùå –û–®–ò–ë–ö–ê {symbol}: {e}")
            return None

    async def _close_scalp_position(self, symbol: str) -> bool:
        try:
            if symbol not in self.active_scalp_positions:
                return True

            response = self.session.close_position(category="linear", symbol=symbol)

            if response.get("retCode") == 0:
                logger.info(f"üîí –ó–ê–ö–†–´–¢–ê –ü–û–ó–ò–¶–ò–Ø: {symbol}")

                entry_price = self.active_scalp_positions[symbol]["entry_price"]
                exit_price = self.get_current_price(symbol)
                if exit_price and entry_price:
                    side = self.active_scalp_positions[symbol]["side"]
                    if side == "Buy":
                        pnl_percent = (exit_price - entry_price) / entry_price * 100
                    else:
                        pnl_percent = (entry_price - exit_price) / entry_price * 100

                    pnl_usd = pnl_percent / 100 * self.SCALP_POSITION_SIZE
                    status = "üí∞" if pnl_usd > 0 else "üí∏"

                    message = f"üîí <b>{symbol}</b> –∑–∞–∫—Ä—ã—Ç–∞\nüìä P&L: {pnl_usd:+.2f} USDT ({pnl_percent:+.2f}%)\n{status}"
                    await self.send_telegram_message(message, parse_mode="HTML")
                    logger.info(f"üìä {symbol} P&L: {pnl_usd:+.2f} USDT ({pnl_percent:+.2f}%)")

                del self.active_scalp_positions[symbol]
                return True
            else:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ö–†–´–¢–ò–Ø {symbol}: {response.get('retMsg')}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ó–ê–ö–†–´–¢–ò–Ø {symbol}: {e}")
            return False

    async def _manage_scalp_position(self, symbol: str):
        if symbol not in self.active_scalp_positions:
            return

        position = self.active_scalp_positions[symbol]
        current_price = self.get_current_price(symbol)
        if not current_price:
            return

        entry_price = position["entry_price"]
        side = position["side"]

        profit_target = self.SCALP_PROFIT_TARGET
        should_close = False

        if side == "Buy":
            if current_price >= entry_price * (1 + profit_target):
                should_close = True
        else:
            if current_price <= entry_price * (1 - profit_target):
                should_close = True

        if should_close:
            await self._close_scalp_position(symbol)

    async def check_scalp_signals(self):
        """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ö–ê–õ–¨–ü–ò–ù–ì–ê"""
        if not self.running or self.BOT_MODE != "scalping":
            return

        current_time = time.time()
        if current_time - self.last_scalp_check < self.SCALP_CHECK_INTERVAL:
            return

        # –û–°–ù–û–í–ù–û–ô –õ–û–ì –ö–ê–ñ–î–´–ï 30 –°–ï–ö–£–ù–î
        self.signal_checks += 1
        self.last_scalp_check = current_time

        timestamp = datetime.now().strftime('%H:%M:%S')
        active_count = len(self.active_scalp_positions)

        logger.info(f"üîç === –ü–†–û–í–ï–†–ö–ê #{self.signal_checks} | {timestamp} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count} ===")

        # –ë–ê–õ–ê–ù–°
        available = self.get_available_balance(self.STABLE)
        balance_str = f"{available:.2f}" if available is not None else "N/A"
        logger.info(f"üí∞ –ë–ê–õ–ê–ù–°: {balance_str} USDT")

        if available is None or available < self.SCALP_POSITION_SIZE:
            logger.warning(f"‚ö†Ô∏è  –ë–ê–õ–ê–ù–° –ù–ò–ó–ö–ò–ô: {balance_str}")
            return

        # –õ–ò–ú–ò–¢ –ü–û–ó–ò–¶–ò–ô
        if active_count >= self.SCALP_MAX_POSITIONS:
            logger.info(f"‚ö†Ô∏è  –õ–ò–ú–ò–¢: {active_count}/{self.SCALP_MAX_POSITIONS}")
            return

        # –ê–ù–ê–õ–ò–ó –ü–ê–†
        logger.info(f"üìä –ê–ù–ê–õ–ò–ó ({len(self.SCALP_SYMBOLS)} –ø–∞—Ä): {', '.join(self.SCALP_SYMBOLS)}")
        signals_found = 0

        for i, symbol in enumerate(self.SCALP_SYMBOLS, 1):
            logger.info(f"  {i}. üìä {symbol} - –ê–Ω–∞–ª–∏–∑...")

            if not self.is_symbol_valid(symbol, "linear"):
                logger.info(f"  ‚ùå {symbol} - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                continue

            rsi = self.get_rsi(symbol)
            if rsi is None:
                logger.info(f"  ‚è≠Ô∏è  {symbol} - –ù–µ—Ç RSI")
                continue

            price = self.get_current_price(symbol)
            if not price:
                logger.info(f"  ‚è≠Ô∏è  {symbol} - –ù–µ—Ç —Ü–µ–Ω—ã")
                continue

            volume_info = self.get_volume_info(symbol)
            volume_mult = volume_info["multiplier"] if volume_info else 0

            logger.info(f"  üìà {symbol} | RSI: {rsi:.1f} | Vol: {volume_mult:.1f}x | ${price:,.2f}")

            # –ü–†–û–í–ï–†–ö–ê –°–ò–ì–ù–ê–õ–û–í
            signal = None
            signal_strength = 0

            if rsi < self.SCALP_RSI_OVERSOLD:
                signal = "Buy"
                signal_strength = (self.SCALP_RSI_OVERSOLD - rsi) / 10
                signals_found += 1
                logger.info(f"  üü¢ –°–ò–ì–ù–ê–õ {signal} | RSI: {rsi:.1f} | –°–∏–ª–∞: {signal_strength:.2f}")

                if signal_strength >= 0.5:
                    logger.info(f"  üéØ –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ! –û—Ç–∫—Ä—ã–≤–∞–µ–º {symbol}")
                    qty = self.calculate_scalp_qty(symbol, self.SCALP_POSITION_SIZE)
                    if qty:
                        order_id = await self.place_scalp_order(symbol, signal, qty, price)
                        if order_id:
                            self.active_scalp_positions[symbol] = {
                                "order_id": order_id,
                                "side": signal,
                                "qty": qty,
                                "entry_price": price,
                                "open_time": datetime.now(),
                                "high_watermark": price,
                                "low_watermark": price,
                                "rsi_at_open": rsi
                            }
                            logger.info(f"  ‚úÖ ‚úÖ –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê: {symbol}")
                            await asyncio.sleep(5)
                            return
                    else:
                        logger.warning(f"  ‚ö†Ô∏è  {symbol} - –û—à–∏–±–∫–∞ qty")
                else:
                    logger.info(f"  ‚è≥ {symbol} - –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª ({signal_strength:.2f})")

            elif rsi > self.SCALP_RSI_OVERBOUGHT:
                signal = "Sell"
                signal_strength = (rsi - self.SCALP_RSI_OVERBOUGHT) / 10
                signals_found += 1
                logger.info(f"  üî¥ –°–ò–ì–ù–ê–õ {signal} | RSI: {rsi:.1f} | –°–∏–ª–∞: {signal_strength:.2f}")

                if signal_strength >= 0.5:
                    qty = self.calculate_scalp_qty(symbol, self.SCALP_POSITION_SIZE)
                    if qty:
                        order_id = await self.place_scalp_order(symbol, signal, qty, price)
                        if order_id:
                            self.active_scalp_positions[symbol] = {
                                "order_id": order_id,
                                "side": signal,
                                "qty": qty,
                                "entry_price": price,
                                "open_time": datetime.now(),
                                "high_watermark": price,
                                "low_watermark": price,
                                "rsi_at_open": rsi
                            }
                            await asyncio.sleep(5)
                            return

            else:
                logger.info(f"  ‚û°Ô∏è  {symbol} - –ù–æ—Ä–º–∞ (RSI {rsi:.1f})")

        # –ò–¢–û–ì–û
        success_rate = (self.successful_signals / self.signal_checks * 100) if self.signal_checks > 0 else 0
        logger.info(f"üìã === –ò–¢–û–ì–û #{self.signal_checks} ===")
        logger.info(f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤: {signals_found} | –°–¥–µ–ª–æ–∫: {self.successful_signals}")
        logger.info(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}% | –ü–æ–∑–∏—Ü–∏–π: {len(self.active_scalp_positions)}")
        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self.SCALP_CHECK_INTERVAL} —Å–µ–∫")
        logger.info("=" * 50)

    async def main_loop(self):
        logger.info("üîÑ === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ó–ê–ü–£–©–ï–ù ===")
        logger.info(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} | –†–µ–∂–∏–º: {self.BOT_MODE}")

        consecutive_errors = 0

        while self.running:
            try:
                consecutive_errors = 0
                logger.info(f"üîÑ –ò–¢–ï–†–ê–¶–ò–Ø #{self.signal_checks + 1}")

                if self.BOT_MODE == "scalping":
                    logger.info("‚ö° –°–ö–ê–õ–¨–ü–ò–ù–ì - –ü–†–û–í–ï–†–ö–ê –°–ò–ì–ù–ê–õ–û–í")
                    await self.check_scalp_signals()

                    logger.info(f"üò¥ –ü–ê–£–ó–ê {self.SCALP_CHECK_INTERVAL} –°–ï–ö–£–ù–î")
                    await asyncio.sleep(self.SCALP_CHECK_INTERVAL)
                else:
                    logger.info("üí§ FUNDING –†–ï–ñ–ò–ú")
                    await asyncio.sleep(self.CHECK_INTERVAL)

            except Exception as e:
                consecutive_errors += 1
                logger.error(f"üí• –û–®–ò–ë–ö–ê #{consecutive_errors}: {e}")

                if consecutive_errors >= 3:
                    await self.send_telegram_message(f"üí• –û–®–ò–ë–ö–ê –¶–ò–ö–õ–ê: {e}")

                await asyncio.sleep(30)

    async def run(self):
        mode_name = "Scalping" if self.BOT_MODE == "scalping" else "Funding"

        try:
            logger.info(f"üöÄ === –ó–ê–ü–£–°–ö {mode_name} BOT v2.4 ===")

            # –ë–ê–õ–ê–ù–°
            available = self.get_available_balance(self.STABLE)
            balance_display = f"{available:.2f}" if available is not None else "N/A"
            logger.info(f"üí∞ –ë–ê–õ–ê–ù–°: {balance_display}")

            # –°–¢–ê–†–¢–ê–ü –°–û–û–ë–©–ï–ù–ò–ï
            startup_message = (
                f"ü§ñ <b>Bybit {mode_name} Bot v2.4</b>\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance_display}</code>\n"
                f"üìà –ü–∞—Ä—ã: <code>{', '.join(self.SCALP_SYMBOLS)}</code>\n"
                f"‚ö° –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{self.SCALP_CHECK_INTERVAL}—Å</b>\n"
                f"üéØ RSI: <code>{self.SCALP_RSI_OVERSOLD}-{self.SCALP_RSI_OVERBOUGHT}</code>\n"
                f"üîÑ <b>–ó–ê–ü–£–©–ï–ù!</b> üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"
            )

            await self.send_telegram_message(startup_message, parse_mode="HTML")
            logger.info("üì± –°–¢–ê–†–¢–ê–ü –û–¢–ü–†–ê–í–õ–ï–ù")

            if self.BOT_MODE == "scalping":
                await self.send_telegram_message(
                    f"‚ö° <b>–°–ö–ê–õ–¨–ü–ò–ù–ì –ê–ö–¢–ò–í–ï–ù</b>\n\n"
                    f"üîç –ü–æ–∏—Å–∫ –∫–∞–∂–¥—ã–µ <b>{self.SCALP_CHECK_INTERVAL}—Å</b>\n"
                    f"üìä –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
                    f"üöÄ <b>–ì–û–¢–û–í –ö –¢–û–†–ì–û–í–õ–ï!</b>",
                    parse_mode="HTML"
                )
                logger.info("‚ö° –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –°–¢–ê–†–¢–ï")

            logger.info("üîÑ === –ó–ê–ü–£–°–ö –ú–ê–ô–ù –õ–£–ü ===")
            await self.main_loop()

        except Exception as e:
            logger.critical(f"üí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            await self.send_telegram_message(f"üí• <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n<code>{e}</code>", parse_mode="HTML")
        finally:
            await self._cleanup()

async def main():
    logger.info("üéØ === MAIN –ó–ê–ü–£–©–ï–ù ===")
    try:
        bot = BybitFundingBot()
        logger.info("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω")
        await bot.run()
    except Exception as e:
        logger.error(f"üí• MAIN –û–®–ò–ë–ö–ê: {e}")
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    logger.info("üöÄ –°–ö–†–ò–ü–¢ –°–¢–ê–†–¢")
    asyncio.run(main())