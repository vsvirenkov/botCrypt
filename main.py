import asyncio
import json
import logging
import time
import os
from datetime import datetime, timedelta
import telegram
from pybit.unified_trading import HTTP
from typing import Dict, List, Optional, Tuple
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler(f'bybit_funding_bot_{datetime.now().strftime("%Y%m%d")}.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BybitFundingBot:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.SYMBOLS = ["DOGEUSDT", "ETHUSDT"]  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã
        self.STABLE = "USDT"
        self.POSITION_SIZE = 5  # USDT –Ω–∞ –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
        self.CHECK_INTERVAL = 1800  # 30 –º–∏–Ω—É—Ç
        self.FUNDING_RATE_THRESHOLD = 0.02  # 0.02% –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π funding rate
        self.MAX_POSITIONS_PER_SYMBOL = 1  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –ø–∞—Ä—É
        self.ORDER_TYPE = "Market"  # "Market" –∏–ª–∏ "Limit"
        self.STOP_LOSS_PERCENT = 0.05  # 5% —Å—Ç–æ–ø-–ª–æ—Å—Å
        self.CLOSE_NEGATIVE_RATE = True  # –ó–∞–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º funding rate

        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
        self.CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "YOUR_TELEGRAM_CHAT_ID")

        # API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
        self.API_KEY = os.getenv("BYBIT_API_KEY")
        self.API_SECRET = os.getenv("BYBIT_API_SECRET")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if not all([self.API_KEY, self.API_SECRET, self.TELEGRAM_TOKEN, self.CHAT_ID]):
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.session = HTTP(
            api_key=self.API_KEY,
            api_secret=self.API_SECRET,
            testnet=False  # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
        )
        self.bot = telegram.Bot(token=self.TELEGRAM_TOKEN)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.active_positions = {}  # {symbol: {'spot_order_id': str, 'perp_order_id': str, 'open_time': datetime}}
        self.running = True

        # Graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

        logger.info(f"üöÄ Bybit Funding Rate Bot –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–∞—Ä: {self.SYMBOLS}")
        logger.info(f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.POSITION_SIZE} USDT")
        logger.info(f"üìä –ü–æ—Ä–æ–≥ funding rate: {self.FUNDING_RATE_THRESHOLD}%")

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False
        asyncio.create_task(self._cleanup())

    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
        for symbol in list(self.active_positions.keys()):
            await self._close_position(symbol)
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(0)

    async def send_telegram_message(self, message: str, parse_mode: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            await self.bot.send_message(
                chat_id=self.CHAT_ID,
                text=message,
                parse_mode=parse_mode
            )
            logger.info(f"üì± Telegram: {message[:100]}...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

    def get_instrument_info(self, category: str, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
        try:
            response = self.session.get_instruments_info(category=category, symbol=symbol)
            if response.get("retCode") != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {symbol}: {response.get('retMsg')}")
                return None

            instrument = response["result"]["list"][0]
            lot_size_filter = instrument.get("lotSizeFilter", {})
            min_order_qty = float(lot_size_filter.get("minOrderQty", "0.001"))
            qty_precision = len(lot_size_filter.get("qtyStep", "0.0001").split(".")[-1])
            min_order_amt = float(lot_size_filter.get("minOrderAmt", "100")) if category == "spot" else 0.0

            logger.info(f"üìä {category.upper()} {symbol}: minQty={min_order_qty}, precision={qty_precision}, minAmt={min_order_amt}")
            return {
                "minOrderQty": min_order_qty,
                "qtyPrecision": qty_precision,
                "minOrderAmt": min_order_amt
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {symbol}: {e}")
            return None

    def get_funding_rate(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ funding rate"""
        try:
            response = self.session.get_tickers(category="linear", symbol=symbol)
            if response.get("retCode") != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è funding rate –¥–ª—è {symbol}: {response.get('retMsg')}")
                return None

            funding_rate = float(response["result"]["list"][0]["fundingRate"])
            rate_percent = funding_rate * 100
            logger.info(f"üíπ {symbol}: Funding Rate {rate_percent:.4f}%")
            return rate_percent
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è funding rate –¥–ª—è {symbol}: {e}")
            return None

    def get_spot_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –Ω–∞ —Å–ø–æ—Ç–µ"""
        try:
            ticker = self.session.get_tickers(category="spot", symbol=symbol)
            return float(ticker["result"]["list"][0]["lastPrice"])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤–æ–π —Ü–µ–Ω—ã {symbol}: {e}")
            return None

    def get_perp_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –Ω–∞ –ø–µ—Ä–ø–µ—Ç—É–∞–ª–µ"""
        try:
            ticker = self.session.get_tickers(category="linear", symbol=symbol)
            return float(ticker["result"]["list"][0]["lastPrice"])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–µ—Ä–ø–µ—Ç—É–∞–ª–∞ {symbol}: {e}")
            return None

    def get_available_balance(self, coin: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            balance = self.session.get_wallet_balance(accountType="UNIFIED", coin=coin)
            coin_list = balance["result"]["list"][0]["coin"]
            for c in coin_list:
                if c["coin"] == coin:
                    balance_value = c.get("walletBalance", c.get("availableToWithdraw", "0"))
                    return float(balance_value)
            logger.warning(f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–ª–∞–Ω—Å–µ")
            return 0.0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {coin}: {e}")
            return None

    def calculate_qty(self, position_size: float, price: float, min_order_qty: float, qty_precision: int) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        qty = position_size / price
        qty = max(round(qty, qty_precision), min_order_qty)
        return qty

    async def place_spot_order(self, symbol: str, side: str, qty: float,
                              min_order_qty: float, qty_precision: int,
                              min_order_amt: float, spot_price: float) -> Optional[str]:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            order_value = qty * spot_price
            if qty < min_order_qty:
                logger.error(f"‚ùå {symbol} Spot: qty {qty} < min {min_order_qty}")
                return None
            if order_value < min_order_amt:
                logger.error(f"‚ùå {symbol} Spot: value {order_value} < min {min_order_amt}")
                return None

            order_params = {
                "category": "spot",
                "symbol": symbol,
                "side": side,
                "orderType": self.ORDER_TYPE,
                "qty": str(qty)
            }
            if self.ORDER_TYPE == "Limit":
                order_params["price"] = str(spot_price)

            logger.info(f"üìà {symbol} Spot {side}: qty={qty}, value={order_value:.2f} USDT")
            response = self.session.place_order(**order_params)

            if response.get("retCode") != 0:
                error_msg = f"‚ùå {symbol} Spot –æ—à–∏–±–∫–∞: {response.get('retMsg')} (Code: {response.get('retCode')})"
                logger.error(error_msg)
                await self.send_telegram_message(error_msg)
                return None

            order_id = response["result"]["orderId"]
            logger.info(f"‚úÖ {symbol} Spot –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order_id}")
            return order_id

        except Exception as e:
            logger.error(f"‚ùå {symbol} Spot –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return None

    async def place_perp_order(self, symbol: str, side: str, qty: float,
                              min_order_qty: float, qty_precision: int,
                              perp_price: float) -> Optional[str]:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            if qty < min_order_qty:
                logger.error(f"‚ùå {symbol} Perp: qty {qty} < min {min_order_qty}")
                return None

            order_params = {
                "category": "linear",
                "symbol": symbol,
                "side": side,
                "orderType": self.ORDER_TYPE,
                "qty": str(qty)
            }
            if self.ORDER_TYPE == "Limit":
                order_params["price"] = str(perp_price)

            logger.info(f"üìâ {symbol} Perp {side}: qty={qty}")
            response = self.session.place_order(**order_params)

            if response.get("retCode") != 0:
                error_msg = f"‚ùå {symbol} Perp –æ—à–∏–±–∫–∞: {response.get('retMsg')} (Code: {response.get('retCode')})"
                logger.error(error_msg)
                await self.send_telegram_message(error_msg)
                return None

            order_id = response["result"]["orderId"]
            logger.info(f"‚úÖ {symbol} Perp –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order_id}")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if self.STOP_LOSS_PERCENT > 0:
                await self._set_perp_stop_loss(symbol, side, qty, perp_price)

            return order_id

        except Exception as e:
            logger.error(f"‚ùå {symbol} Perp –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return None

    async def _set_perp_stop_loss(self, symbol: str, side: str, qty: float, entry_price: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if side == "Sell":  # Short –ø–æ–∑–∏—Ü–∏—è
                stop_price = entry_price * (1 + self.STOP_LOSS_PERCENT)
                stop_side = "Buy"  # –ó–∞–∫—Ä—ã—Ç–∏–µ short
            else:  # Long –ø–æ–∑–∏—Ü–∏—è (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–º)
                stop_price = entry_price * (1 - self.STOP_LOSS_PERCENT)
                stop_side = "Sell"

            response = self.session.place_order(
                category="linear",
                symbol=symbol,
                side=stop_side,
                orderType="Market",
                qty=str(qty),
                stopLoss=str(stop_price),
                triggerPrice=str(stop_price),
                triggerBy="LastPrice",
                orderLinkId=f"{symbol}_stoploss_{int(time.time())}"
            )

            if response.get("retCode") == 0:
                logger.info(f"üõ°Ô∏è {symbol} Stop-loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stop_price}")
            else:
                logger.warning(f"‚ö†Ô∏è {symbol} –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å stop-loss: {response.get('retMsg')}")

        except Exception as e:
            logger.error(f"‚ùå {symbol} –û—à–∏–±–∫–∞ stop-loss: {e}")

    async def _close_position(self, symbol: str) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if symbol not in self.active_positions:
                logger.info(f"‚ÑπÔ∏è {symbol}: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                return True

            position = self.active_positions[symbol]
            close_time = datetime.now()
            duration = (close_time - position["open_time"]).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if "spot_order_id" in position:
                spot_response = self.session.cancel_order(
                    category="spot",
                    symbol=symbol,
                    orderId=position["spot_order_id"]
                )
                logger.info(f"üîÑ {symbol} Spot –∑–∞–∫—Ä—ã—Ç–∏–µ: {spot_response.get('retMsg', 'OK')}")

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if "perp_order_id" in position:
                perp_response = self.session.close_position(
                    category="linear",
                    symbol=symbol
                )
                logger.info(f"üîÑ {symbol} Perp –∑–∞–∫—Ä—ã—Ç–∏–µ: {perp_response.get('retMsg', 'OK')}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            del self.active_positions[symbol]

            message = f"üîí {symbol} –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞\n‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {duration:.1f}—á"
            await self.send_telegram_message(message)
            logger.info(message)

            return True

        except Exception as e:
            logger.error(f"‚ùå {symbol} –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False

    async def check_existing_positions(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            positions = self.session.get_positions(category="linear", symbol=symbol)
            for pos in positions["result"]["list"]:
                if float(pos["size"]) > 0:
                    logger.info(f"‚ÑπÔ∏è {symbol}: –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return True

            return False
        except Exception as e:
            logger.error(f"‚ùå {symbol} –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False

    async def open_arbitrage_position(self, symbol: str) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            if await self.check_existing_positions(symbol):
                return False

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
            spot_price = self.get_spot_price(symbol)
            perp_price = self.get_perp_price(symbol)
            if not spot_price or not perp_price:
                logger.error(f"‚ùå {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã")
                return False

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ
            spot_info = self.get_instrument_info("spot", symbol)
            perp_info = self.get_instrument_info("linear", symbol)
            if not spot_info or not perp_info:
                logger.error(f"‚ùå {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ")
                return False

            # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            qty = self.calculate_qty(
                self.POSITION_SIZE, spot_price,
                spot_info["minOrderQty"], spot_info["qtyPrecision"]
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            available = self.get_available_balance(self.STABLE)
            if available is None or available < self.POSITION_SIZE * 2:
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ {available}")
                return False

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            spot_order_id = await self.place_spot_order(
                symbol, "Buy", qty, spot_info["minOrderQty"],
                spot_info["qtyPrecision"], spot_info["minOrderAmt"], spot_price
            )

            if not spot_order_id:
                logger.error(f"‚ùå {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–ø–æ—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä")
                return False

            perp_order_id = await self.place_perp_order(
                symbol, "Sell", qty, perp_info["minOrderQty"],
                perp_info["qtyPrecision"], perp_price
            )

            if not perp_order_id:
                logger.error(f"‚ùå {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä")
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
                await self.session.cancel_order(category="spot", symbol=symbol, orderId=spot_order_id)
                return False

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            self.active_positions[symbol] = {
                "spot_order_id": spot_order_id,
                "perp_order_id": perp_order_id,
                "open_time": datetime.now(),
                "spot_price": spot_price,
                "perp_price": perp_price,
                "qty": qty
            }

            message = (
                f"üöÄ {symbol} –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!\n"
                f"üìà –°–ø–æ—Ç: –ö—É–ø–ª–µ–Ω–æ {qty:.6f} –ø–æ {spot_price:,.2f}\n"
                f"üìâ –ü–µ—Ä–ø: –ü—Ä–æ–¥–∞–Ω–æ {qty:.6f} –ø–æ {perp_price:,.2f}\n"
                f"üí∞ –†–∞–∑–º–µ—Ä: {POSITION_SIZE} USDT\n"
                f"üîí Stop-loss: {self.STOP_LOSS_PERCENT*100}%"
            )
            await self.send_telegram_message(message, parse_mode="HTML")
            logger.info(f"‚úÖ {symbol}: –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞")

            return True

        except Exception as e:
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False

    async def monitor_positions(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            for symbol in list(self.active_positions.keys()):
                position = self.active_positions[symbol]
                open_time = position["open_time"]
                duration = (datetime.now() - open_time).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ funding rate –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                if self.CLOSE_NEGATIVE_RATE:
                    funding_rate = self.get_funding_rate(symbol)
                    if funding_rate is not None and funding_rate < 0:
                        logger.info(f"üìâ {symbol}: Funding rate –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ({funding_rate:.2f}%)")
                        await self._close_position(symbol)
                        continue

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
                if duration % 8 < 0.1:  # –ö–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤
                    funding_rate = self.get_funding_rate(symbol)
                    if funding_rate:
                        message = f"üìä {symbol} —Å—Ç–∞—Ç—É—Å\n‚è±Ô∏è –í—Ä–µ–º—è: {duration:.1f}—á\nüíπ Funding: {funding_rate:.4f}%"
                        await self.send_telegram_message(message)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")

    async def check_balance_alert(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –∞–ª–µ—Ä—Ç—ã"""
        try:
            available = self.get_available_balance(self.STABLE)
            if available is None:
                return

            total_required = len(self.SYMBOLS) * self.POSITION_SIZE * 2
            if available < total_required * 0.5:  # –ú–µ–Ω–µ–µ 50% –æ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ
                message = f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å!\nüí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f} {self.STABLE}\nüìä –¢—Ä–µ–±—É–µ—Ç—Å—è: {total_required:.2f} {self.STABLE}"
                await self.send_telegram_message(message)
                logger.warning(message)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")

    async def main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")

        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
                await self.check_balance_alert()

                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π
                await self.monitor_positions()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                for symbol in self.SYMBOLS:
                    if symbol in self.active_positions and len(self.active_positions[symbol]) >= self.MAX_POSITIONS_PER_SYMBOL:
                        continue

                    funding_rate = self.get_funding_rate(symbol)
                    if funding_rate is None:
                        continue

                    if funding_rate > self.FUNDING_RATE_THRESHOLD:
                        logger.info(f"üéØ {symbol}: Funding rate {funding_rate:.4f}% > –ø–æ—Ä–æ–≥–∞ {self.FUNDING_RATE_THRESHOLD}%")
                        success = await self.open_arbitrage_position(symbol)
                        if success:
                            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    else:
                        if funding_rate < 0 and symbol in self.active_positions:
                            logger.info(f"üìâ {symbol}: Funding rate –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –∑–∞–∫—Ä—ã–≤–∞–µ–º")
                            await self._close_position(symbol)

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                logger.debug(f"üò¥ –ü–∞—É–∑–∞ {self.CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(self.CHECK_INTERVAL)

            except asyncio.CancelledError:
                logger.info("üõë –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await self.send_telegram_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            available = self.get_available_balance(self.STABLE)
            if available:
                message = (
                    f"ü§ñ Bybit Funding Bot –∑–∞–ø—É—â–µ–Ω!\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {available:.2f} {self.STABLE}\n"
                    f"üìà –ü–∞—Ä—ã: {', '.join(self.SYMBOLS)}\n"
                    f"üíº –†–∞–∑–º–µ—Ä: {self.POSITION_SIZE} USDT\n"
                    f"üìä –ü–æ—Ä–æ–≥: {self.FUNDING_RATE_THRESHOLD}%\n"
                    f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.CHECK_INTERVAL/60} –º–∏–Ω"
                )
                await self.send_telegram_message(message, parse_mode="HTML")
                logger.info(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {available:.2f} {self.STABLE}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")

            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            await self.main_loop()

        except KeyboardInterrupt:
            logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await self.send_telegram_message(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            await self._cleanup()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    bot = BybitFundingBot()
    await bot.run()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["BYBIT_API_KEY", "BYBIT_API_SECRET", "TELEGRAM_TOKEN", "TELEGRAM_CHAT_ID"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é:")
        for var in missing_vars:
            print(f"export {var}='–≤–∞—à_–∑–Ω–∞—á–µ–Ω–∏–µ'")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())